generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  userId              String      @db.ObjectId
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken    String   
  expires         DateTime
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionToken])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id                            String      @id @default(auto()) @map("_id") @db.ObjectId
  name                          String?     @default("Guest User")
  email                         String
  emailVerified                 Boolean?    @map("email_verified")
  password                      String?
  image                         String?
  phone                         String?
  new_user                      Boolean?    @default(true)
  online                        Boolean?
  accounts                      Account[]
  sessions                      Session[]
  serviceProfile                ServiceProfile?
  reviews                       Review[]
  type                          UserType    @default(USER)
  createdAt                     DateTime    @default(now())
  updatedAt                     DateTime    @updatedAt
  location                      Location[]
  verifyToken                   String?
  verifyTokenExpiry             DateTime?
  forgotPasswordToken           String?
  forgotPasswordTokenExpiry     DateTime?
  messages                      Message[]
  projects                      Project[]

  contactId                     String[]          @db.ObjectId
  contact                       Contact[]         @relation(fields: [contactId], references: [id])

  conversationId                String[]          @db.ObjectId
  conversation                  Conversation[]    @relation(fields: [conversationId], references: [id])

  seenMessageId                 String[]          @db.ObjectId
  seenMessages                  Message[]         @relation("Seen", fields: [seenMessageId], references: [id])
  
  @@unique([email])
}

enum UserType {
  USER
  PRO
  ADMIN
}

model Contact {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime          @default(now())
  conversation        Conversation[]
  contactRequest      ContactRequest[]

  userId              String[]          @db.ObjectId
  user                User[]            @relation(fields: [userId], references: [id])
}

model ContactRequest {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  request_status    RequestStatus?    @default(PENDING)
  createdAt         DateTime          @default(now())
  sender            String            @db.ObjectId

  contactId         String            @db.ObjectId
  contact           Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

enum RequestStatus {
    PENDING 
    ACCEPTED
}

model Conversation {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime        @default(now())
  lastMessageAt     DateTime        @default(now())
  isGroup           Boolean?
  messages          Message[]       

  contactId         String          @db.ObjectId
  contact           Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  userId            String[]        @db.ObjectId
  user              User[]          @relation(fields: [userId], references: [id])
}

model Message {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  content           String
  createdAt         DateTime        @default(now())
  updateAt          DateTime        @default(now())
  
  conversationId    String          @db.ObjectId
  conversation      Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  seenId            String[]        @db.ObjectId
  seen              User[]          @relation("Seen", fields: [seenId], references: [id])

  senderId          String?         @db.ObjectId
  sender            User?           @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Location {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  postal_code       String?
  lng               String?
  lat               String?

  serviceProfileId  String?          @db.ObjectId
  service           ServiceProfile?  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)

  userId            String?          @db.ObjectId
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ServiceProfile {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String?    @default("Service Name")
  email           String?    @default("service@profile.email")
  phone           String?    @default("000-000-0000")
  rating          Float?     @default(0) @db.Double
  introduction    String?    @default("Write your service introduction")
  experience      Int?       @default(0)
  bio             String?    @default("Write your own bio as specialist")
  image           String?
  employees       Int?       @default(1)
  hiredTimes      Int?       @default(0)
  bgChecked       Boolean    @default(false)
  published       Boolean    @default(false)
  specialties_Do  String[]   @default(["Service You can do"])
  specialties_No  String[]   @default(["Service You can't do"])
  payment_methods String[]   @default(["Service Payment Methods"])
  schedule_policy String?    @default("Service Schedule Policy")
  businessHours   Day[]
  reviews         Review[]
  posts           Post[]
  location        Location[]
  categories      ServiceCategory[]
  offers          ReverseOffer[]

  interestedInProjectId String[]          @db.ObjectId
  interestedInProject   Project[]         @relation("interested", fields: [interestedInProjectId], references: [id])

  projectId       String[]          @db.ObjectId
  projects        Project[]         @relation(fields: [projectId], references: [id])

  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String     @db.ObjectId

  @@unique([userId])
}

model Category {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  serviceProfileId ServiceCategory[]
  
  @@unique([title])
}

model ServiceCategory {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId

  categoryId       String          @db.ObjectId
  category         Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  serviceProfileId String          @db.ObjectId
  service   ServiceProfile  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
  
  @@unique([categoryId, serviceProfileId])
}

model Day {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  type             DayType        
  from             String
  to               String
  date             DateTime       @default(now())

  serviceProfileId String         @db.ObjectId
  service          ServiceProfile @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
  @@unique([date])
}

enum DayType {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Project {
    id               String     @id @default(auto()) @map("_id") @db.ObjectId
    approved         Boolean?     @default(false)
    title            String?
    content          String?
    budget           Int?
    categories       String[]
    specialties      String[]
    offers           ReverseOffer[]

    interestedId     String[]            @db.ObjectId
    interested       ServiceProfile[]    @relation("interested", fields: [interestedId], references: [id])

    serviceProfileId String[]           @db.ObjectId
    service          ServiceProfile[]  @relation(fields: [serviceProfileId], references: [id])
    
    userId           String           @db.ObjectId
    user             User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReverseOffer {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  budget            String?

  projectId         String         @db.ObjectId
  project           Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  serviceProfileId String         @db.ObjectId
  service          ServiceProfile @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
}

model Review {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  rating           Int?
  comment          String?
  content          String?
  service_quality  Int?
  punctuality      Int?
  communication    Int?
  consultations    Int?
  professionalism  Int?
  expertise        Int?
  efficiency       Int?
  accuracy         Int?
  friendliness     Int?
  problem_solving  Int?
  emergency        Int?
  value_for_money  Int?
  reliability      Int?
  safety           Int?
  transparency     Int?
  discounts        Int?
  innovation       Int?
  accountability   Int?
  overall_rating   Float?     @default(0) @db.Double
  createdAt        DateTime?  @default(now())
  projectId        String           @db.ObjectId

  serviceProfileId String           @db.ObjectId
  service          ServiceProfile?  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
  
  userId           String           @db.ObjectId
  user             User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  title            String?
  content          String?
  image            String?
  date             DateTime?        @default(now())
  likes            Like[]
  comments         Comment[]

  serviceProfileId String           @db.ObjectId
  service          ServiceProfile?  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
}

model Like {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  userId           String

  postId           String           @db.ObjectId
  post             Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  content          String

  postId           String           @db.ObjectId
  post             Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
}