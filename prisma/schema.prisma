generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  userId             String     @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   
  expires      DateTime

  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionToken])
}

model User {
  id                        String           @id @default(auto()) @map("_id") @db.ObjectId
  name                      String?          @default("Guest User")
  email                     String           
  emailVerified             Boolean?         @map("email_verified")
  password                  String?
  image                     String?
  phone                     String?
  accounts                  Account[]
  sessions                  Session[]
  serviceProfile            ServiceProfile?
  reviews                   Review[]
  type                      UserType         @default(USER)
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  location                  Location[]
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  businesses                Customer[]

  @@unique([email])
}

enum UserType {
  USER
  PRO
  ADMIN
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ServiceProfile {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String?    @default("Service Name")
  email           String?    @default("service@profile.email")
  phone           String?    @default("000-000-0000")
  rating          Float?     @default(0) @db.Double
  introduction    String?    @default("Write your service introduction")
  experience      Int?       @default(0)
  bio             String?    @default("Write your own bio as specialist")
  image           String?
  employees       Int?       @default(1)
  hiredTimes      Int?       @default(0)
  bgChecked       Boolean    @default(false)
  published       Boolean    @default(false)
  specialties_Do  String[]   @default(["Service You can do"])
  specialties_No  String[]   @default(["Service You can't do"])
  payment_Methods String[]   @default(["Service Payment Methods"])
  schedualPolicy  String?    @default("Service Schedule Policy")
  businessHours   Day[]
  reviews         Review[]
  posts           Post[]
  location        Location[]
  customers       Customer[]
  categories      ServiceCategory[]

  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String     @db.ObjectId


  @@unique([userId])
}

model Customer {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  userId           String          @db.ObjectId
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  serviceProfileId String          @db.ObjectId
  service          ServiceProfile  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
  
}

model Day {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  type             DayType        
  from             String
  to               String

  serviceProfileId String         @db.ObjectId
  service          ServiceProfile @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)

  @@unique([type])
}

enum DayType {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Category {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  serviceProfileId ServiceCategory[]
  @@unique([title])
}

model ServiceCategory {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId

  categoryId       String        @db.ObjectId
  category         Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  serviceProfileId String        @db.ObjectId
  serviceProfile   ServiceProfile  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
  @@unique([categoryId, serviceProfileId])
}

model Review {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  rating           Int?
  comment          String?
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt

  serviceProfileId String           @db.ObjectId
  service          ServiceProfile?  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
  
  userId           String           @db.ObjectId
  user             User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId

  serviceProfileId String           @db.ObjectId
  service          ServiceProfile?  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
}

model Location {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  lng               String?
  lat               String?

  service           ServiceProfile?  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
  serviceProfileId  String?          @db.ObjectId

  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String?          @db.ObjectId
}