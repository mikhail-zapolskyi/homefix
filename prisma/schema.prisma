generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("MONGODB_URI")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken      String    @unique
  userId            String    @db.ObjectId
  expires           DateTime
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String?           @default("Guest User")
  email             String            @unique
  emailVerified     Boolean?          @map("email_verified")
  password          String?
  image             String?
  phone             String?
  accounts          Account[]
  sessions          Session[]
  serviceProfile    ServiceProfile?
  reviews           Review[]
  type              UserType          @default(USER)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  location          Location[]      
}

enum UserType {
  USER
  PRO
  ADMIN
}

model VerificationToken {
id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier        String
  token             String    @unique
  expires           DateTime  @map("expiresAt")
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ServiceProfile {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  name              String?  
  email             String?   
  phone             String?
  rating            Float?      @default(0) @db.Double
  introduction      String?
  experience        Int?
  bio               String?
  image             String?
  specialtiesDo     String[]
  specialtiesNo     String[]
  employees         Int         @default(1)
  hiredTimes        Int         @default(0)
  bgChecked         Boolean?    @default(false)
  paymentMethods    String[]
  schedualPolicy    String?
  businessHours     Day[] 
  reviews           Review[]
  posts             Post[]
  clients           String[]
  categories        Category[]
  location          Location[]

  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String     @unique @db.ObjectId 
}

model Day {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  serviceProfileId  String         @db.ObjectId
  type              DayType        @unique
  from              DateTime
  to                DateTime
  service           ServiceProfile  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
}

model Category {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  serviceProfileId  String         @db.ObjectId
  service           ServiceProfile  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
}

enum DayType {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Review {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  rating            Int?
  comment           String?
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @updatedAt

  serviceProfileId  String           @db.ObjectId
  service           ServiceProfile?  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
  userId            String           @db.ObjectId
  user              User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId

  serviceProfileId  String           @db.ObjectId
  service           ServiceProfile?  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
}

model Location {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  lng               String?
  lat               String?

  service           ServiceProfile?  @relation(fields: [serviceProfileId], references: [id], onDelete: Cascade)
  serviceProfileId  String?          @db.ObjectId

  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String?          @db.ObjectId 
}